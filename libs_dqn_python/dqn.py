# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dqn')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dqn')
    _dqn = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dqn', [dirname(__file__)])
        except ImportError:
            import _dqn
            return _dqn
        try:
            _mod = imp.load_module('_dqn', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dqn = swig_import_helper()
    del swig_import_helper
else:
    import _dqn
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dqn.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _dqn.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _dqn.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _dqn.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _dqn.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _dqn.SwigPyIterator_equal(self, x)

    def copy(self):
        return _dqn.SwigPyIterator_copy(self)

    def next(self):
        return _dqn.SwigPyIterator_next(self)

    def __next__(self):
        return _dqn.SwigPyIterator___next__(self)

    def previous(self):
        return _dqn.SwigPyIterator_previous(self)

    def advance(self, n):
        return _dqn.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _dqn.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _dqn.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _dqn.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _dqn.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _dqn.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _dqn.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _dqn.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.VectorChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.VectorChar___nonzero__(self)

    def __bool__(self):
        return _dqn.VectorChar___bool__(self)

    def __len__(self):
        return _dqn.VectorChar___len__(self)

    def __getslice__(self, i, j):
        return _dqn.VectorChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.VectorChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.VectorChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.VectorChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.VectorChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.VectorChar___setitem__(self, *args)

    def pop(self):
        return _dqn.VectorChar_pop(self)

    def append(self, x):
        return _dqn.VectorChar_append(self, x)

    def empty(self):
        return _dqn.VectorChar_empty(self)

    def size(self):
        return _dqn.VectorChar_size(self)

    def swap(self, v):
        return _dqn.VectorChar_swap(self, v)

    def begin(self):
        return _dqn.VectorChar_begin(self)

    def end(self):
        return _dqn.VectorChar_end(self)

    def rbegin(self):
        return _dqn.VectorChar_rbegin(self)

    def rend(self):
        return _dqn.VectorChar_rend(self)

    def clear(self):
        return _dqn.VectorChar_clear(self)

    def get_allocator(self):
        return _dqn.VectorChar_get_allocator(self)

    def pop_back(self):
        return _dqn.VectorChar_pop_back(self)

    def erase(self, *args):
        return _dqn.VectorChar_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_VectorChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.VectorChar_push_back(self, x)

    def front(self):
        return _dqn.VectorChar_front(self)

    def back(self):
        return _dqn.VectorChar_back(self)

    def assign(self, n, x):
        return _dqn.VectorChar_assign(self, n, x)

    def resize(self, *args):
        return _dqn.VectorChar_resize(self, *args)

    def insert(self, *args):
        return _dqn.VectorChar_insert(self, *args)

    def reserve(self, n):
        return _dqn.VectorChar_reserve(self, n)

    def capacity(self):
        return _dqn.VectorChar_capacity(self)
    __swig_destroy__ = _dqn.delete_VectorChar
    __del__ = lambda self: None
VectorChar_swigregister = _dqn.VectorChar_swigregister
VectorChar_swigregister(VectorChar)

class VectorUnsignedChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUnsignedChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUnsignedChar, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.VectorUnsignedChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.VectorUnsignedChar___nonzero__(self)

    def __bool__(self):
        return _dqn.VectorUnsignedChar___bool__(self)

    def __len__(self):
        return _dqn.VectorUnsignedChar___len__(self)

    def __getslice__(self, i, j):
        return _dqn.VectorUnsignedChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.VectorUnsignedChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.VectorUnsignedChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.VectorUnsignedChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.VectorUnsignedChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.VectorUnsignedChar___setitem__(self, *args)

    def pop(self):
        return _dqn.VectorUnsignedChar_pop(self)

    def append(self, x):
        return _dqn.VectorUnsignedChar_append(self, x)

    def empty(self):
        return _dqn.VectorUnsignedChar_empty(self)

    def size(self):
        return _dqn.VectorUnsignedChar_size(self)

    def swap(self, v):
        return _dqn.VectorUnsignedChar_swap(self, v)

    def begin(self):
        return _dqn.VectorUnsignedChar_begin(self)

    def end(self):
        return _dqn.VectorUnsignedChar_end(self)

    def rbegin(self):
        return _dqn.VectorUnsignedChar_rbegin(self)

    def rend(self):
        return _dqn.VectorUnsignedChar_rend(self)

    def clear(self):
        return _dqn.VectorUnsignedChar_clear(self)

    def get_allocator(self):
        return _dqn.VectorUnsignedChar_get_allocator(self)

    def pop_back(self):
        return _dqn.VectorUnsignedChar_pop_back(self)

    def erase(self, *args):
        return _dqn.VectorUnsignedChar_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_VectorUnsignedChar(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.VectorUnsignedChar_push_back(self, x)

    def front(self):
        return _dqn.VectorUnsignedChar_front(self)

    def back(self):
        return _dqn.VectorUnsignedChar_back(self)

    def assign(self, n, x):
        return _dqn.VectorUnsignedChar_assign(self, n, x)

    def resize(self, *args):
        return _dqn.VectorUnsignedChar_resize(self, *args)

    def insert(self, *args):
        return _dqn.VectorUnsignedChar_insert(self, *args)

    def reserve(self, n):
        return _dqn.VectorUnsignedChar_reserve(self, n)

    def capacity(self):
        return _dqn.VectorUnsignedChar_capacity(self)
    __swig_destroy__ = _dqn.delete_VectorUnsignedChar
    __del__ = lambda self: None
VectorUnsignedChar_swigregister = _dqn.VectorUnsignedChar_swigregister
VectorUnsignedChar_swigregister(VectorUnsignedChar)

class VectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.VectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.VectorInt___nonzero__(self)

    def __bool__(self):
        return _dqn.VectorInt___bool__(self)

    def __len__(self):
        return _dqn.VectorInt___len__(self)

    def __getslice__(self, i, j):
        return _dqn.VectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.VectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.VectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.VectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.VectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.VectorInt___setitem__(self, *args)

    def pop(self):
        return _dqn.VectorInt_pop(self)

    def append(self, x):
        return _dqn.VectorInt_append(self, x)

    def empty(self):
        return _dqn.VectorInt_empty(self)

    def size(self):
        return _dqn.VectorInt_size(self)

    def swap(self, v):
        return _dqn.VectorInt_swap(self, v)

    def begin(self):
        return _dqn.VectorInt_begin(self)

    def end(self):
        return _dqn.VectorInt_end(self)

    def rbegin(self):
        return _dqn.VectorInt_rbegin(self)

    def rend(self):
        return _dqn.VectorInt_rend(self)

    def clear(self):
        return _dqn.VectorInt_clear(self)

    def get_allocator(self):
        return _dqn.VectorInt_get_allocator(self)

    def pop_back(self):
        return _dqn.VectorInt_pop_back(self)

    def erase(self, *args):
        return _dqn.VectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_VectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.VectorInt_push_back(self, x)

    def front(self):
        return _dqn.VectorInt_front(self)

    def back(self):
        return _dqn.VectorInt_back(self)

    def assign(self, n, x):
        return _dqn.VectorInt_assign(self, n, x)

    def resize(self, *args):
        return _dqn.VectorInt_resize(self, *args)

    def insert(self, *args):
        return _dqn.VectorInt_insert(self, *args)

    def reserve(self, n):
        return _dqn.VectorInt_reserve(self, n)

    def capacity(self):
        return _dqn.VectorInt_capacity(self)
    __swig_destroy__ = _dqn.delete_VectorInt
    __del__ = lambda self: None
VectorInt_swigregister = _dqn.VectorInt_swigregister
VectorInt_swigregister(VectorInt)

class VectorUnsignedInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUnsignedInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUnsignedInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.VectorUnsignedInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.VectorUnsignedInt___nonzero__(self)

    def __bool__(self):
        return _dqn.VectorUnsignedInt___bool__(self)

    def __len__(self):
        return _dqn.VectorUnsignedInt___len__(self)

    def __getslice__(self, i, j):
        return _dqn.VectorUnsignedInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.VectorUnsignedInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.VectorUnsignedInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.VectorUnsignedInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.VectorUnsignedInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.VectorUnsignedInt___setitem__(self, *args)

    def pop(self):
        return _dqn.VectorUnsignedInt_pop(self)

    def append(self, x):
        return _dqn.VectorUnsignedInt_append(self, x)

    def empty(self):
        return _dqn.VectorUnsignedInt_empty(self)

    def size(self):
        return _dqn.VectorUnsignedInt_size(self)

    def swap(self, v):
        return _dqn.VectorUnsignedInt_swap(self, v)

    def begin(self):
        return _dqn.VectorUnsignedInt_begin(self)

    def end(self):
        return _dqn.VectorUnsignedInt_end(self)

    def rbegin(self):
        return _dqn.VectorUnsignedInt_rbegin(self)

    def rend(self):
        return _dqn.VectorUnsignedInt_rend(self)

    def clear(self):
        return _dqn.VectorUnsignedInt_clear(self)

    def get_allocator(self):
        return _dqn.VectorUnsignedInt_get_allocator(self)

    def pop_back(self):
        return _dqn.VectorUnsignedInt_pop_back(self)

    def erase(self, *args):
        return _dqn.VectorUnsignedInt_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_VectorUnsignedInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.VectorUnsignedInt_push_back(self, x)

    def front(self):
        return _dqn.VectorUnsignedInt_front(self)

    def back(self):
        return _dqn.VectorUnsignedInt_back(self)

    def assign(self, n, x):
        return _dqn.VectorUnsignedInt_assign(self, n, x)

    def resize(self, *args):
        return _dqn.VectorUnsignedInt_resize(self, *args)

    def insert(self, *args):
        return _dqn.VectorUnsignedInt_insert(self, *args)

    def reserve(self, n):
        return _dqn.VectorUnsignedInt_reserve(self, n)

    def capacity(self):
        return _dqn.VectorUnsignedInt_capacity(self)
    __swig_destroy__ = _dqn.delete_VectorUnsignedInt
    __del__ = lambda self: None
VectorUnsignedInt_swigregister = _dqn.VectorUnsignedInt_swigregister
VectorUnsignedInt_swigregister(VectorUnsignedInt)

class VectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _dqn.VectorFloat___bool__(self)

    def __len__(self):
        return _dqn.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _dqn.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _dqn.VectorFloat_pop(self)

    def append(self, x):
        return _dqn.VectorFloat_append(self, x)

    def empty(self):
        return _dqn.VectorFloat_empty(self)

    def size(self):
        return _dqn.VectorFloat_size(self)

    def swap(self, v):
        return _dqn.VectorFloat_swap(self, v)

    def begin(self):
        return _dqn.VectorFloat_begin(self)

    def end(self):
        return _dqn.VectorFloat_end(self)

    def rbegin(self):
        return _dqn.VectorFloat_rbegin(self)

    def rend(self):
        return _dqn.VectorFloat_rend(self)

    def clear(self):
        return _dqn.VectorFloat_clear(self)

    def get_allocator(self):
        return _dqn.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _dqn.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _dqn.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_VectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.VectorFloat_push_back(self, x)

    def front(self):
        return _dqn.VectorFloat_front(self)

    def back(self):
        return _dqn.VectorFloat_back(self)

    def assign(self, n, x):
        return _dqn.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _dqn.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _dqn.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _dqn.VectorFloat_reserve(self, n)

    def capacity(self):
        return _dqn.VectorFloat_capacity(self)
    __swig_destroy__ = _dqn.delete_VectorFloat
    __del__ = lambda self: None
VectorFloat_swigregister = _dqn.VectorFloat_swigregister
VectorFloat_swigregister(VectorFloat)

class VectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _dqn.VectorDouble___bool__(self)

    def __len__(self):
        return _dqn.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _dqn.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _dqn.VectorDouble_pop(self)

    def append(self, x):
        return _dqn.VectorDouble_append(self, x)

    def empty(self):
        return _dqn.VectorDouble_empty(self)

    def size(self):
        return _dqn.VectorDouble_size(self)

    def swap(self, v):
        return _dqn.VectorDouble_swap(self, v)

    def begin(self):
        return _dqn.VectorDouble_begin(self)

    def end(self):
        return _dqn.VectorDouble_end(self)

    def rbegin(self):
        return _dqn.VectorDouble_rbegin(self)

    def rend(self):
        return _dqn.VectorDouble_rend(self)

    def clear(self):
        return _dqn.VectorDouble_clear(self)

    def get_allocator(self):
        return _dqn.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _dqn.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _dqn.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_VectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.VectorDouble_push_back(self, x)

    def front(self):
        return _dqn.VectorDouble_front(self)

    def back(self):
        return _dqn.VectorDouble_back(self)

    def assign(self, n, x):
        return _dqn.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _dqn.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _dqn.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _dqn.VectorDouble_reserve(self, n)

    def capacity(self):
        return _dqn.VectorDouble_capacity(self)
    __swig_destroy__ = _dqn.delete_VectorDouble
    __del__ = lambda self: None
VectorDouble_swigregister = _dqn.VectorDouble_swigregister
VectorDouble_swigregister(VectorDouble)

class MatrixInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.MatrixInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.MatrixInt___nonzero__(self)

    def __bool__(self):
        return _dqn.MatrixInt___bool__(self)

    def __len__(self):
        return _dqn.MatrixInt___len__(self)

    def __getslice__(self, i, j):
        return _dqn.MatrixInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.MatrixInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.MatrixInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.MatrixInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.MatrixInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.MatrixInt___setitem__(self, *args)

    def pop(self):
        return _dqn.MatrixInt_pop(self)

    def append(self, x):
        return _dqn.MatrixInt_append(self, x)

    def empty(self):
        return _dqn.MatrixInt_empty(self)

    def size(self):
        return _dqn.MatrixInt_size(self)

    def swap(self, v):
        return _dqn.MatrixInt_swap(self, v)

    def begin(self):
        return _dqn.MatrixInt_begin(self)

    def end(self):
        return _dqn.MatrixInt_end(self)

    def rbegin(self):
        return _dqn.MatrixInt_rbegin(self)

    def rend(self):
        return _dqn.MatrixInt_rend(self)

    def clear(self):
        return _dqn.MatrixInt_clear(self)

    def get_allocator(self):
        return _dqn.MatrixInt_get_allocator(self)

    def pop_back(self):
        return _dqn.MatrixInt_pop_back(self)

    def erase(self, *args):
        return _dqn.MatrixInt_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_MatrixInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.MatrixInt_push_back(self, x)

    def front(self):
        return _dqn.MatrixInt_front(self)

    def back(self):
        return _dqn.MatrixInt_back(self)

    def assign(self, n, x):
        return _dqn.MatrixInt_assign(self, n, x)

    def resize(self, *args):
        return _dqn.MatrixInt_resize(self, *args)

    def insert(self, *args):
        return _dqn.MatrixInt_insert(self, *args)

    def reserve(self, n):
        return _dqn.MatrixInt_reserve(self, n)

    def capacity(self):
        return _dqn.MatrixInt_capacity(self)
    __swig_destroy__ = _dqn.delete_MatrixInt
    __del__ = lambda self: None
MatrixInt_swigregister = _dqn.MatrixInt_swigregister
MatrixInt_swigregister(MatrixInt)

class MatrixUnsignedInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixUnsignedInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixUnsignedInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.MatrixUnsignedInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.MatrixUnsignedInt___nonzero__(self)

    def __bool__(self):
        return _dqn.MatrixUnsignedInt___bool__(self)

    def __len__(self):
        return _dqn.MatrixUnsignedInt___len__(self)

    def __getslice__(self, i, j):
        return _dqn.MatrixUnsignedInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.MatrixUnsignedInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.MatrixUnsignedInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.MatrixUnsignedInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.MatrixUnsignedInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.MatrixUnsignedInt___setitem__(self, *args)

    def pop(self):
        return _dqn.MatrixUnsignedInt_pop(self)

    def append(self, x):
        return _dqn.MatrixUnsignedInt_append(self, x)

    def empty(self):
        return _dqn.MatrixUnsignedInt_empty(self)

    def size(self):
        return _dqn.MatrixUnsignedInt_size(self)

    def swap(self, v):
        return _dqn.MatrixUnsignedInt_swap(self, v)

    def begin(self):
        return _dqn.MatrixUnsignedInt_begin(self)

    def end(self):
        return _dqn.MatrixUnsignedInt_end(self)

    def rbegin(self):
        return _dqn.MatrixUnsignedInt_rbegin(self)

    def rend(self):
        return _dqn.MatrixUnsignedInt_rend(self)

    def clear(self):
        return _dqn.MatrixUnsignedInt_clear(self)

    def get_allocator(self):
        return _dqn.MatrixUnsignedInt_get_allocator(self)

    def pop_back(self):
        return _dqn.MatrixUnsignedInt_pop_back(self)

    def erase(self, *args):
        return _dqn.MatrixUnsignedInt_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_MatrixUnsignedInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.MatrixUnsignedInt_push_back(self, x)

    def front(self):
        return _dqn.MatrixUnsignedInt_front(self)

    def back(self):
        return _dqn.MatrixUnsignedInt_back(self)

    def assign(self, n, x):
        return _dqn.MatrixUnsignedInt_assign(self, n, x)

    def resize(self, *args):
        return _dqn.MatrixUnsignedInt_resize(self, *args)

    def insert(self, *args):
        return _dqn.MatrixUnsignedInt_insert(self, *args)

    def reserve(self, n):
        return _dqn.MatrixUnsignedInt_reserve(self, n)

    def capacity(self):
        return _dqn.MatrixUnsignedInt_capacity(self)
    __swig_destroy__ = _dqn.delete_MatrixUnsignedInt
    __del__ = lambda self: None
MatrixUnsignedInt_swigregister = _dqn.MatrixUnsignedInt_swigregister
MatrixUnsignedInt_swigregister(MatrixUnsignedInt)

class MatrixFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.MatrixFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.MatrixFloat___nonzero__(self)

    def __bool__(self):
        return _dqn.MatrixFloat___bool__(self)

    def __len__(self):
        return _dqn.MatrixFloat___len__(self)

    def __getslice__(self, i, j):
        return _dqn.MatrixFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.MatrixFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.MatrixFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.MatrixFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.MatrixFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.MatrixFloat___setitem__(self, *args)

    def pop(self):
        return _dqn.MatrixFloat_pop(self)

    def append(self, x):
        return _dqn.MatrixFloat_append(self, x)

    def empty(self):
        return _dqn.MatrixFloat_empty(self)

    def size(self):
        return _dqn.MatrixFloat_size(self)

    def swap(self, v):
        return _dqn.MatrixFloat_swap(self, v)

    def begin(self):
        return _dqn.MatrixFloat_begin(self)

    def end(self):
        return _dqn.MatrixFloat_end(self)

    def rbegin(self):
        return _dqn.MatrixFloat_rbegin(self)

    def rend(self):
        return _dqn.MatrixFloat_rend(self)

    def clear(self):
        return _dqn.MatrixFloat_clear(self)

    def get_allocator(self):
        return _dqn.MatrixFloat_get_allocator(self)

    def pop_back(self):
        return _dqn.MatrixFloat_pop_back(self)

    def erase(self, *args):
        return _dqn.MatrixFloat_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_MatrixFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.MatrixFloat_push_back(self, x)

    def front(self):
        return _dqn.MatrixFloat_front(self)

    def back(self):
        return _dqn.MatrixFloat_back(self)

    def assign(self, n, x):
        return _dqn.MatrixFloat_assign(self, n, x)

    def resize(self, *args):
        return _dqn.MatrixFloat_resize(self, *args)

    def insert(self, *args):
        return _dqn.MatrixFloat_insert(self, *args)

    def reserve(self, n):
        return _dqn.MatrixFloat_reserve(self, n)

    def capacity(self):
        return _dqn.MatrixFloat_capacity(self)
    __swig_destroy__ = _dqn.delete_MatrixFloat
    __del__ = lambda self: None
MatrixFloat_swigregister = _dqn.MatrixFloat_swigregister
MatrixFloat_swigregister(MatrixFloat)

class MatrixDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.MatrixDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.MatrixDouble___nonzero__(self)

    def __bool__(self):
        return _dqn.MatrixDouble___bool__(self)

    def __len__(self):
        return _dqn.MatrixDouble___len__(self)

    def __getslice__(self, i, j):
        return _dqn.MatrixDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.MatrixDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.MatrixDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.MatrixDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.MatrixDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.MatrixDouble___setitem__(self, *args)

    def pop(self):
        return _dqn.MatrixDouble_pop(self)

    def append(self, x):
        return _dqn.MatrixDouble_append(self, x)

    def empty(self):
        return _dqn.MatrixDouble_empty(self)

    def size(self):
        return _dqn.MatrixDouble_size(self)

    def swap(self, v):
        return _dqn.MatrixDouble_swap(self, v)

    def begin(self):
        return _dqn.MatrixDouble_begin(self)

    def end(self):
        return _dqn.MatrixDouble_end(self)

    def rbegin(self):
        return _dqn.MatrixDouble_rbegin(self)

    def rend(self):
        return _dqn.MatrixDouble_rend(self)

    def clear(self):
        return _dqn.MatrixDouble_clear(self)

    def get_allocator(self):
        return _dqn.MatrixDouble_get_allocator(self)

    def pop_back(self):
        return _dqn.MatrixDouble_pop_back(self)

    def erase(self, *args):
        return _dqn.MatrixDouble_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_MatrixDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.MatrixDouble_push_back(self, x)

    def front(self):
        return _dqn.MatrixDouble_front(self)

    def back(self):
        return _dqn.MatrixDouble_back(self)

    def assign(self, n, x):
        return _dqn.MatrixDouble_assign(self, n, x)

    def resize(self, *args):
        return _dqn.MatrixDouble_resize(self, *args)

    def insert(self, *args):
        return _dqn.MatrixDouble_insert(self, *args)

    def reserve(self, n):
        return _dqn.MatrixDouble_reserve(self, n)

    def capacity(self):
        return _dqn.MatrixDouble_capacity(self)
    __swig_destroy__ = _dqn.delete_MatrixDouble
    __del__ = lambda self: None
MatrixDouble_swigregister = _dqn.MatrixDouble_swigregister
MatrixDouble_swigregister(MatrixDouble)

class sGeometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sGeometry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _dqn.sGeometry_w_set
    __swig_getmethods__["w"] = _dqn.sGeometry_w_get
    if _newclass:
        w = _swig_property(_dqn.sGeometry_w_get, _dqn.sGeometry_w_set)
    __swig_setmethods__["h"] = _dqn.sGeometry_h_set
    __swig_getmethods__["h"] = _dqn.sGeometry_h_get
    if _newclass:
        h = _swig_property(_dqn.sGeometry_h_get, _dqn.sGeometry_h_set)
    __swig_setmethods__["d"] = _dqn.sGeometry_d_set
    __swig_getmethods__["d"] = _dqn.sGeometry_d_get
    if _newclass:
        d = _swig_property(_dqn.sGeometry_d_get, _dqn.sGeometry_d_set)

    def __init__(self):
        this = _dqn.new_sGeometry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_sGeometry
    __del__ = lambda self: None
sGeometry_swigregister = _dqn.sGeometry_swigregister
sGeometry_swigregister(sGeometry)

class sHyperparameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sHyperparameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sHyperparameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["init_weight_range"] = _dqn.sHyperparameters_init_weight_range_set
    __swig_getmethods__["init_weight_range"] = _dqn.sHyperparameters_init_weight_range_get
    if _newclass:
        init_weight_range = _swig_property(_dqn.sHyperparameters_init_weight_range_get, _dqn.sHyperparameters_init_weight_range_set)
    __swig_setmethods__["learning_rate"] = _dqn.sHyperparameters_learning_rate_set
    __swig_getmethods__["learning_rate"] = _dqn.sHyperparameters_learning_rate_get
    if _newclass:
        learning_rate = _swig_property(_dqn.sHyperparameters_learning_rate_get, _dqn.sHyperparameters_learning_rate_set)
    __swig_setmethods__["lambda1"] = _dqn.sHyperparameters_lambda1_set
    __swig_getmethods__["lambda1"] = _dqn.sHyperparameters_lambda1_get
    if _newclass:
        lambda1 = _swig_property(_dqn.sHyperparameters_lambda1_get, _dqn.sHyperparameters_lambda1_set)
    __swig_setmethods__["lambda2"] = _dqn.sHyperparameters_lambda2_set
    __swig_getmethods__["lambda2"] = _dqn.sHyperparameters_lambda2_get
    if _newclass:
        lambda2 = _swig_property(_dqn.sHyperparameters_lambda2_get, _dqn.sHyperparameters_lambda2_set)
    __swig_setmethods__["dropout"] = _dqn.sHyperparameters_dropout_set
    __swig_getmethods__["dropout"] = _dqn.sHyperparameters_dropout_get
    if _newclass:
        dropout = _swig_property(_dqn.sHyperparameters_dropout_get, _dqn.sHyperparameters_dropout_set)
    __swig_setmethods__["beta1"] = _dqn.sHyperparameters_beta1_set
    __swig_getmethods__["beta1"] = _dqn.sHyperparameters_beta1_get
    if _newclass:
        beta1 = _swig_property(_dqn.sHyperparameters_beta1_get, _dqn.sHyperparameters_beta1_set)
    __swig_setmethods__["beta2"] = _dqn.sHyperparameters_beta2_set
    __swig_getmethods__["beta2"] = _dqn.sHyperparameters_beta2_get
    if _newclass:
        beta2 = _swig_property(_dqn.sHyperparameters_beta2_get, _dqn.sHyperparameters_beta2_set)
    __swig_setmethods__["epsilon"] = _dqn.sHyperparameters_epsilon_set
    __swig_getmethods__["epsilon"] = _dqn.sHyperparameters_epsilon_get
    if _newclass:
        epsilon = _swig_property(_dqn.sHyperparameters_epsilon_get, _dqn.sHyperparameters_epsilon_set)
    __swig_setmethods__["minibatch_size"] = _dqn.sHyperparameters_minibatch_size_set
    __swig_getmethods__["minibatch_size"] = _dqn.sHyperparameters_minibatch_size_get
    if _newclass:
        minibatch_size = _swig_property(_dqn.sHyperparameters_minibatch_size_get, _dqn.sHyperparameters_minibatch_size_set)

    def __init__(self):
        this = _dqn.new_sHyperparameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_sHyperparameters
    __del__ = lambda self: None
sHyperparameters_swigregister = _dqn.sHyperparameters_swigregister
sHyperparameters_swigregister(sHyperparameters)

class Log(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Log, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Log, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_Log(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_Log
    __del__ = lambda self: None

    def set_output_file_name(self, file_name):
        return _dqn.Log_set_output_file_name(self, file_name)

    def put_string(self, str):
        return _dqn.Log_put_string(self, str)

    def __lshift__(self, *args):
        return _dqn.Log___lshift__(self, *args)
Log_swigregister = _dqn.Log_swigregister
Log_swigregister(Log)

class sDQNExperienceBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sDQNExperienceBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sDQNExperienceBuffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _dqn.sDQNExperienceBuffer_state_set
    __swig_getmethods__["state"] = _dqn.sDQNExperienceBuffer_state_get
    if _newclass:
        state = _swig_property(_dqn.sDQNExperienceBuffer_state_get, _dqn.sDQNExperienceBuffer_state_set)
    __swig_setmethods__["q_values"] = _dqn.sDQNExperienceBuffer_q_values_set
    __swig_getmethods__["q_values"] = _dqn.sDQNExperienceBuffer_q_values_get
    if _newclass:
        q_values = _swig_property(_dqn.sDQNExperienceBuffer_q_values_get, _dqn.sDQNExperienceBuffer_q_values_set)
    __swig_setmethods__["action"] = _dqn.sDQNExperienceBuffer_action_set
    __swig_getmethods__["action"] = _dqn.sDQNExperienceBuffer_action_get
    if _newclass:
        action = _swig_property(_dqn.sDQNExperienceBuffer_action_get, _dqn.sDQNExperienceBuffer_action_set)
    __swig_setmethods__["reward"] = _dqn.sDQNExperienceBuffer_reward_set
    __swig_getmethods__["reward"] = _dqn.sDQNExperienceBuffer_reward_get
    if _newclass:
        reward = _swig_property(_dqn.sDQNExperienceBuffer_reward_get, _dqn.sDQNExperienceBuffer_reward_set)
    __swig_setmethods__["is_final"] = _dqn.sDQNExperienceBuffer_is_final_set
    __swig_getmethods__["is_final"] = _dqn.sDQNExperienceBuffer_is_final_get
    if _newclass:
        is_final = _swig_property(_dqn.sDQNExperienceBuffer_is_final_get, _dqn.sDQNExperienceBuffer_is_final_set)

    def __init__(self):
        this = _dqn.new_sDQNExperienceBuffer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_sDQNExperienceBuffer
    __del__ = lambda self: None
sDQNExperienceBuffer_swigregister = _dqn.sDQNExperienceBuffer_swigregister
sDQNExperienceBuffer_swigregister(sDQNExperienceBuffer)

class DQNInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQNInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQNInterface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_DQNInterface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_DQNInterface
    __del__ = lambda self: None

    def init_interface(self, state_geometry, actions_count, experience_buffer_size):
        return _dqn.DQNInterface_init_interface(self, state_geometry, actions_count, experience_buffer_size)

    def buffer_clear(self):
        return _dqn.DQNInterface_buffer_clear(self)

    def get_q_values(self):
        return _dqn.DQNInterface_get_q_values(self)

    def get_max_q_value(self):
        return _dqn.DQNInterface_get_max_q_value(self)

    def add(self, state, q_values, action, reward):
        return _dqn.DQNInterface_add(self, state, q_values, action, reward)

    def add_final(self, state, q_values, action, final_reward):
        return _dqn.DQNInterface_add_final(self, state, q_values, action, final_reward)

    def compute_q_values(self, state):
        return _dqn.DQNInterface_compute_q_values(self, state)

    def learn(self):
        return _dqn.DQNInterface_learn(self)

    def new_batch(self):
        return _dqn.DQNInterface_new_batch(self)

    def is_full(self):
        return _dqn.DQNInterface_is_full(self)

    def test(self):
        return _dqn.DQNInterface_test(self)

    def get_compare_result(self):
        return _dqn.DQNInterface_get_compare_result(self)

    def save(self, file_name_prefix):
        return _dqn.DQNInterface_save(self, file_name_prefix)

    def load_weights(self, file_name_prefix):
        return _dqn.DQNInterface_load_weights(self, file_name_prefix)

    def _print(self):
        return _dqn.DQNInterface__print(self)
DQNInterface_swigregister = _dqn.DQNInterface_swigregister
DQNInterface_swigregister(DQNInterface)

class DQN(DQNInterface):
    __swig_setmethods__ = {}
    for _s in [DQNInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQN, name, value)
    __swig_getmethods__ = {}
    for _s in [DQNInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DQN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_DQN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_DQN
    __del__ = lambda self: None

    def init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size):
        return _dqn.DQN_init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size)

    def compute_q_values(self, state):
        return _dqn.DQN_compute_q_values(self, state)

    def learn(self):
        return _dqn.DQN_learn(self)

    def test(self):
        return _dqn.DQN_test(self)

    def new_batch(self):
        return _dqn.DQN_new_batch(self)

    def is_full(self):
        return _dqn.DQN_is_full(self)
DQN_swigregister = _dqn.DQN_swigregister
DQN_swigregister(DQN)

class DDQN(DQNInterface):
    __swig_setmethods__ = {}
    for _s in [DQNInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DDQN, name, value)
    __swig_getmethods__ = {}
    for _s in [DQNInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DDQN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_DDQN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_DDQN
    __del__ = lambda self: None

    def init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size):
        return _dqn.DDQN_init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size)

    def compute_q_values(self, state):
        return _dqn.DDQN_compute_q_values(self, state)

    def learn(self):
        return _dqn.DDQN_learn(self)

    def test(self):
        return _dqn.DDQN_test(self)

    def new_batch(self):
        return _dqn.DDQN_new_batch(self)

    def is_full(self):
        return _dqn.DDQN_is_full(self)
DDQN_swigregister = _dqn.DDQN_swigregister
DDQN_swigregister(DDQN)

class DQNCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQNCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQNCompare, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_DQNCompare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_DQNCompare
    __del__ = lambda self: None

    def clear(self):
        return _dqn.DQNCompare_clear(self)

    def set_output_size(self, output_size):
        return _dqn.DQNCompare_set_output_size(self, output_size)

    def compare(self, target_value, output_value, action):
        return _dqn.DQNCompare_compare(self, target_value, output_value, action)

    def process(self, fixed_bars_count=-1):
        return _dqn.DQNCompare_process(self, fixed_bars_count)

    def get_error_average_squared(self):
        return _dqn.DQNCompare_get_error_average_squared(self)

    def get_error_min_squared(self):
        return _dqn.DQNCompare_get_error_min_squared(self)

    def get_error_max_squared(self):
        return _dqn.DQNCompare_get_error_max_squared(self)

    def save_text_file(self, log_file_name_prefix):
        return _dqn.DQNCompare_save_text_file(self, log_file_name_prefix)

    def save_json_file(self, json_file_name):
        return _dqn.DQNCompare_save_json_file(self, json_file_name)

    def process_json_result(self):
        return _dqn.DQNCompare_process_json_result(self)
DQNCompare_swigregister = _dqn.DQNCompare_swigregister
DQNCompare_swigregister(DQNCompare)

class DQNP(DQNInterface):
    __swig_setmethods__ = {}
    for _s in [DQNInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQNP, name, value)
    __swig_getmethods__ = {}
    for _s in [DQNInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DQNP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_DQNP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_DQNP
    __del__ = lambda self: None

    def init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size):
        return _dqn.DQNP_init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size)

    def compute_q_values(self, state):
        return _dqn.DQNP_compute_q_values(self, state)

    def learn(self):
        return _dqn.DQNP_learn(self)

    def test(self):
        return _dqn.DQNP_test(self)

    def new_batch(self):
        return _dqn.DQNP_new_batch(self)

    def is_full(self):
        return _dqn.DQNP_is_full(self)
DQNP_swigregister = _dqn.DQNP_swigregister
DQNP_swigregister(DQNP)

class RandomDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_RandomDistribution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_RandomDistribution
    __del__ = lambda self: None

    def set(self, p_, count=-1):
        return _dqn.RandomDistribution_set(self, p_, count)

    def get(self):
        return _dqn.RandomDistribution_get(self)
RandomDistribution_swigregister = _dqn.RandomDistribution_swigregister
RandomDistribution_swigregister(RandomDistribution)


def String():
    return _dqn.String()
String = _dqn.String
# This file is compatible with both classic and new-style classes.


