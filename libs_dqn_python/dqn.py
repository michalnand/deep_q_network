# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_dqn')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_dqn')
    _dqn = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dqn', [dirname(__file__)])
        except ImportError:
            import _dqn
            return _dqn
        try:
            _mod = imp.load_module('_dqn', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _dqn = swig_import_helper()
    del swig_import_helper
else:
    import _dqn
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dqn.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _dqn.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _dqn.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _dqn.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _dqn.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _dqn.SwigPyIterator_equal(self, x)

    def copy(self):
        return _dqn.SwigPyIterator_copy(self)

    def next(self):
        return _dqn.SwigPyIterator_next(self)

    def __next__(self):
        return _dqn.SwigPyIterator___next__(self)

    def previous(self):
        return _dqn.SwigPyIterator_previous(self)

    def advance(self, n):
        return _dqn.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _dqn.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _dqn.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _dqn.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _dqn.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _dqn.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _dqn.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _dqn.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class CharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.CharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.CharVector___nonzero__(self)

    def __bool__(self):
        return _dqn.CharVector___bool__(self)

    def __len__(self):
        return _dqn.CharVector___len__(self)

    def __getslice__(self, i, j):
        return _dqn.CharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.CharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.CharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.CharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.CharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.CharVector___setitem__(self, *args)

    def pop(self):
        return _dqn.CharVector_pop(self)

    def append(self, x):
        return _dqn.CharVector_append(self, x)

    def empty(self):
        return _dqn.CharVector_empty(self)

    def size(self):
        return _dqn.CharVector_size(self)

    def swap(self, v):
        return _dqn.CharVector_swap(self, v)

    def begin(self):
        return _dqn.CharVector_begin(self)

    def end(self):
        return _dqn.CharVector_end(self)

    def rbegin(self):
        return _dqn.CharVector_rbegin(self)

    def rend(self):
        return _dqn.CharVector_rend(self)

    def clear(self):
        return _dqn.CharVector_clear(self)

    def get_allocator(self):
        return _dqn.CharVector_get_allocator(self)

    def pop_back(self):
        return _dqn.CharVector_pop_back(self)

    def erase(self, *args):
        return _dqn.CharVector_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_CharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.CharVector_push_back(self, x)

    def front(self):
        return _dqn.CharVector_front(self)

    def back(self):
        return _dqn.CharVector_back(self)

    def assign(self, n, x):
        return _dqn.CharVector_assign(self, n, x)

    def resize(self, *args):
        return _dqn.CharVector_resize(self, *args)

    def insert(self, *args):
        return _dqn.CharVector_insert(self, *args)

    def reserve(self, n):
        return _dqn.CharVector_reserve(self, n)

    def capacity(self):
        return _dqn.CharVector_capacity(self)
    __swig_destroy__ = _dqn.delete_CharVector
    __del__ = lambda self: None
CharVector_swigregister = _dqn.CharVector_swigregister
CharVector_swigregister(CharVector)

class UnsignedCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedCharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.UnsignedCharVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.UnsignedCharVector___nonzero__(self)

    def __bool__(self):
        return _dqn.UnsignedCharVector___bool__(self)

    def __len__(self):
        return _dqn.UnsignedCharVector___len__(self)

    def __getslice__(self, i, j):
        return _dqn.UnsignedCharVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.UnsignedCharVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.UnsignedCharVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.UnsignedCharVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.UnsignedCharVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.UnsignedCharVector___setitem__(self, *args)

    def pop(self):
        return _dqn.UnsignedCharVector_pop(self)

    def append(self, x):
        return _dqn.UnsignedCharVector_append(self, x)

    def empty(self):
        return _dqn.UnsignedCharVector_empty(self)

    def size(self):
        return _dqn.UnsignedCharVector_size(self)

    def swap(self, v):
        return _dqn.UnsignedCharVector_swap(self, v)

    def begin(self):
        return _dqn.UnsignedCharVector_begin(self)

    def end(self):
        return _dqn.UnsignedCharVector_end(self)

    def rbegin(self):
        return _dqn.UnsignedCharVector_rbegin(self)

    def rend(self):
        return _dqn.UnsignedCharVector_rend(self)

    def clear(self):
        return _dqn.UnsignedCharVector_clear(self)

    def get_allocator(self):
        return _dqn.UnsignedCharVector_get_allocator(self)

    def pop_back(self):
        return _dqn.UnsignedCharVector_pop_back(self)

    def erase(self, *args):
        return _dqn.UnsignedCharVector_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_UnsignedCharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.UnsignedCharVector_push_back(self, x)

    def front(self):
        return _dqn.UnsignedCharVector_front(self)

    def back(self):
        return _dqn.UnsignedCharVector_back(self)

    def assign(self, n, x):
        return _dqn.UnsignedCharVector_assign(self, n, x)

    def resize(self, *args):
        return _dqn.UnsignedCharVector_resize(self, *args)

    def insert(self, *args):
        return _dqn.UnsignedCharVector_insert(self, *args)

    def reserve(self, n):
        return _dqn.UnsignedCharVector_reserve(self, n)

    def capacity(self):
        return _dqn.UnsignedCharVector_capacity(self)
    __swig_destroy__ = _dqn.delete_UnsignedCharVector
    __del__ = lambda self: None
UnsignedCharVector_swigregister = _dqn.UnsignedCharVector_swigregister
UnsignedCharVector_swigregister(UnsignedCharVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.IntVector___nonzero__(self)

    def __bool__(self):
        return _dqn.IntVector___bool__(self)

    def __len__(self):
        return _dqn.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _dqn.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.IntVector___setitem__(self, *args)

    def pop(self):
        return _dqn.IntVector_pop(self)

    def append(self, x):
        return _dqn.IntVector_append(self, x)

    def empty(self):
        return _dqn.IntVector_empty(self)

    def size(self):
        return _dqn.IntVector_size(self)

    def swap(self, v):
        return _dqn.IntVector_swap(self, v)

    def begin(self):
        return _dqn.IntVector_begin(self)

    def end(self):
        return _dqn.IntVector_end(self)

    def rbegin(self):
        return _dqn.IntVector_rbegin(self)

    def rend(self):
        return _dqn.IntVector_rend(self)

    def clear(self):
        return _dqn.IntVector_clear(self)

    def get_allocator(self):
        return _dqn.IntVector_get_allocator(self)

    def pop_back(self):
        return _dqn.IntVector_pop_back(self)

    def erase(self, *args):
        return _dqn.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.IntVector_push_back(self, x)

    def front(self):
        return _dqn.IntVector_front(self)

    def back(self):
        return _dqn.IntVector_back(self)

    def assign(self, n, x):
        return _dqn.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _dqn.IntVector_resize(self, *args)

    def insert(self, *args):
        return _dqn.IntVector_insert(self, *args)

    def reserve(self, n):
        return _dqn.IntVector_reserve(self, n)

    def capacity(self):
        return _dqn.IntVector_capacity(self)
    __swig_destroy__ = _dqn.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _dqn.IntVector_swigregister
IntVector_swigregister(IntVector)

class UnsignedIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedIntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.UnsignedIntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.UnsignedIntVector___nonzero__(self)

    def __bool__(self):
        return _dqn.UnsignedIntVector___bool__(self)

    def __len__(self):
        return _dqn.UnsignedIntVector___len__(self)

    def __getslice__(self, i, j):
        return _dqn.UnsignedIntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.UnsignedIntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.UnsignedIntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.UnsignedIntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.UnsignedIntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.UnsignedIntVector___setitem__(self, *args)

    def pop(self):
        return _dqn.UnsignedIntVector_pop(self)

    def append(self, x):
        return _dqn.UnsignedIntVector_append(self, x)

    def empty(self):
        return _dqn.UnsignedIntVector_empty(self)

    def size(self):
        return _dqn.UnsignedIntVector_size(self)

    def swap(self, v):
        return _dqn.UnsignedIntVector_swap(self, v)

    def begin(self):
        return _dqn.UnsignedIntVector_begin(self)

    def end(self):
        return _dqn.UnsignedIntVector_end(self)

    def rbegin(self):
        return _dqn.UnsignedIntVector_rbegin(self)

    def rend(self):
        return _dqn.UnsignedIntVector_rend(self)

    def clear(self):
        return _dqn.UnsignedIntVector_clear(self)

    def get_allocator(self):
        return _dqn.UnsignedIntVector_get_allocator(self)

    def pop_back(self):
        return _dqn.UnsignedIntVector_pop_back(self)

    def erase(self, *args):
        return _dqn.UnsignedIntVector_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_UnsignedIntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.UnsignedIntVector_push_back(self, x)

    def front(self):
        return _dqn.UnsignedIntVector_front(self)

    def back(self):
        return _dqn.UnsignedIntVector_back(self)

    def assign(self, n, x):
        return _dqn.UnsignedIntVector_assign(self, n, x)

    def resize(self, *args):
        return _dqn.UnsignedIntVector_resize(self, *args)

    def insert(self, *args):
        return _dqn.UnsignedIntVector_insert(self, *args)

    def reserve(self, n):
        return _dqn.UnsignedIntVector_reserve(self, n)

    def capacity(self):
        return _dqn.UnsignedIntVector_capacity(self)
    __swig_destroy__ = _dqn.delete_UnsignedIntVector
    __del__ = lambda self: None
UnsignedIntVector_swigregister = _dqn.UnsignedIntVector_swigregister
UnsignedIntVector_swigregister(UnsignedIntVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.FloatVector___nonzero__(self)

    def __bool__(self):
        return _dqn.FloatVector___bool__(self)

    def __len__(self):
        return _dqn.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _dqn.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.FloatVector___setitem__(self, *args)

    def pop(self):
        return _dqn.FloatVector_pop(self)

    def append(self, x):
        return _dqn.FloatVector_append(self, x)

    def empty(self):
        return _dqn.FloatVector_empty(self)

    def size(self):
        return _dqn.FloatVector_size(self)

    def swap(self, v):
        return _dqn.FloatVector_swap(self, v)

    def begin(self):
        return _dqn.FloatVector_begin(self)

    def end(self):
        return _dqn.FloatVector_end(self)

    def rbegin(self):
        return _dqn.FloatVector_rbegin(self)

    def rend(self):
        return _dqn.FloatVector_rend(self)

    def clear(self):
        return _dqn.FloatVector_clear(self)

    def get_allocator(self):
        return _dqn.FloatVector_get_allocator(self)

    def pop_back(self):
        return _dqn.FloatVector_pop_back(self)

    def erase(self, *args):
        return _dqn.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.FloatVector_push_back(self, x)

    def front(self):
        return _dqn.FloatVector_front(self)

    def back(self):
        return _dqn.FloatVector_back(self)

    def assign(self, n, x):
        return _dqn.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _dqn.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _dqn.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _dqn.FloatVector_reserve(self, n)

    def capacity(self):
        return _dqn.FloatVector_capacity(self)
    __swig_destroy__ = _dqn.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _dqn.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _dqn.DoubleVector___bool__(self)

    def __len__(self):
        return _dqn.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _dqn.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _dqn.DoubleVector_pop(self)

    def append(self, x):
        return _dqn.DoubleVector_append(self, x)

    def empty(self):
        return _dqn.DoubleVector_empty(self)

    def size(self):
        return _dqn.DoubleVector_size(self)

    def swap(self, v):
        return _dqn.DoubleVector_swap(self, v)

    def begin(self):
        return _dqn.DoubleVector_begin(self)

    def end(self):
        return _dqn.DoubleVector_end(self)

    def rbegin(self):
        return _dqn.DoubleVector_rbegin(self)

    def rend(self):
        return _dqn.DoubleVector_rend(self)

    def clear(self):
        return _dqn.DoubleVector_clear(self)

    def get_allocator(self):
        return _dqn.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _dqn.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _dqn.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.DoubleVector_push_back(self, x)

    def front(self):
        return _dqn.DoubleVector_front(self)

    def back(self):
        return _dqn.DoubleVector_back(self)

    def assign(self, n, x):
        return _dqn.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _dqn.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _dqn.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _dqn.DoubleVector_reserve(self, n)

    def capacity(self):
        return _dqn.DoubleVector_capacity(self)
    __swig_destroy__ = _dqn.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _dqn.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class IntMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntMatrix, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.IntMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.IntMatrix___nonzero__(self)

    def __bool__(self):
        return _dqn.IntMatrix___bool__(self)

    def __len__(self):
        return _dqn.IntMatrix___len__(self)

    def __getslice__(self, i, j):
        return _dqn.IntMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.IntMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.IntMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.IntMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.IntMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.IntMatrix___setitem__(self, *args)

    def pop(self):
        return _dqn.IntMatrix_pop(self)

    def append(self, x):
        return _dqn.IntMatrix_append(self, x)

    def empty(self):
        return _dqn.IntMatrix_empty(self)

    def size(self):
        return _dqn.IntMatrix_size(self)

    def swap(self, v):
        return _dqn.IntMatrix_swap(self, v)

    def begin(self):
        return _dqn.IntMatrix_begin(self)

    def end(self):
        return _dqn.IntMatrix_end(self)

    def rbegin(self):
        return _dqn.IntMatrix_rbegin(self)

    def rend(self):
        return _dqn.IntMatrix_rend(self)

    def clear(self):
        return _dqn.IntMatrix_clear(self)

    def get_allocator(self):
        return _dqn.IntMatrix_get_allocator(self)

    def pop_back(self):
        return _dqn.IntMatrix_pop_back(self)

    def erase(self, *args):
        return _dqn.IntMatrix_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_IntMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.IntMatrix_push_back(self, x)

    def front(self):
        return _dqn.IntMatrix_front(self)

    def back(self):
        return _dqn.IntMatrix_back(self)

    def assign(self, n, x):
        return _dqn.IntMatrix_assign(self, n, x)

    def resize(self, *args):
        return _dqn.IntMatrix_resize(self, *args)

    def insert(self, *args):
        return _dqn.IntMatrix_insert(self, *args)

    def reserve(self, n):
        return _dqn.IntMatrix_reserve(self, n)

    def capacity(self):
        return _dqn.IntMatrix_capacity(self)
    __swig_destroy__ = _dqn.delete_IntMatrix
    __del__ = lambda self: None
IntMatrix_swigregister = _dqn.IntMatrix_swigregister
IntMatrix_swigregister(IntMatrix)

class UnsignedIntMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnsignedIntMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnsignedIntMatrix, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.UnsignedIntMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.UnsignedIntMatrix___nonzero__(self)

    def __bool__(self):
        return _dqn.UnsignedIntMatrix___bool__(self)

    def __len__(self):
        return _dqn.UnsignedIntMatrix___len__(self)

    def __getslice__(self, i, j):
        return _dqn.UnsignedIntMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.UnsignedIntMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.UnsignedIntMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.UnsignedIntMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.UnsignedIntMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.UnsignedIntMatrix___setitem__(self, *args)

    def pop(self):
        return _dqn.UnsignedIntMatrix_pop(self)

    def append(self, x):
        return _dqn.UnsignedIntMatrix_append(self, x)

    def empty(self):
        return _dqn.UnsignedIntMatrix_empty(self)

    def size(self):
        return _dqn.UnsignedIntMatrix_size(self)

    def swap(self, v):
        return _dqn.UnsignedIntMatrix_swap(self, v)

    def begin(self):
        return _dqn.UnsignedIntMatrix_begin(self)

    def end(self):
        return _dqn.UnsignedIntMatrix_end(self)

    def rbegin(self):
        return _dqn.UnsignedIntMatrix_rbegin(self)

    def rend(self):
        return _dqn.UnsignedIntMatrix_rend(self)

    def clear(self):
        return _dqn.UnsignedIntMatrix_clear(self)

    def get_allocator(self):
        return _dqn.UnsignedIntMatrix_get_allocator(self)

    def pop_back(self):
        return _dqn.UnsignedIntMatrix_pop_back(self)

    def erase(self, *args):
        return _dqn.UnsignedIntMatrix_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_UnsignedIntMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.UnsignedIntMatrix_push_back(self, x)

    def front(self):
        return _dqn.UnsignedIntMatrix_front(self)

    def back(self):
        return _dqn.UnsignedIntMatrix_back(self)

    def assign(self, n, x):
        return _dqn.UnsignedIntMatrix_assign(self, n, x)

    def resize(self, *args):
        return _dqn.UnsignedIntMatrix_resize(self, *args)

    def insert(self, *args):
        return _dqn.UnsignedIntMatrix_insert(self, *args)

    def reserve(self, n):
        return _dqn.UnsignedIntMatrix_reserve(self, n)

    def capacity(self):
        return _dqn.UnsignedIntMatrix_capacity(self)
    __swig_destroy__ = _dqn.delete_UnsignedIntMatrix
    __del__ = lambda self: None
UnsignedIntMatrix_swigregister = _dqn.UnsignedIntMatrix_swigregister
UnsignedIntMatrix_swigregister(UnsignedIntMatrix)

class FloatMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatMatrix, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.FloatMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.FloatMatrix___nonzero__(self)

    def __bool__(self):
        return _dqn.FloatMatrix___bool__(self)

    def __len__(self):
        return _dqn.FloatMatrix___len__(self)

    def __getslice__(self, i, j):
        return _dqn.FloatMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.FloatMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.FloatMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.FloatMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.FloatMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.FloatMatrix___setitem__(self, *args)

    def pop(self):
        return _dqn.FloatMatrix_pop(self)

    def append(self, x):
        return _dqn.FloatMatrix_append(self, x)

    def empty(self):
        return _dqn.FloatMatrix_empty(self)

    def size(self):
        return _dqn.FloatMatrix_size(self)

    def swap(self, v):
        return _dqn.FloatMatrix_swap(self, v)

    def begin(self):
        return _dqn.FloatMatrix_begin(self)

    def end(self):
        return _dqn.FloatMatrix_end(self)

    def rbegin(self):
        return _dqn.FloatMatrix_rbegin(self)

    def rend(self):
        return _dqn.FloatMatrix_rend(self)

    def clear(self):
        return _dqn.FloatMatrix_clear(self)

    def get_allocator(self):
        return _dqn.FloatMatrix_get_allocator(self)

    def pop_back(self):
        return _dqn.FloatMatrix_pop_back(self)

    def erase(self, *args):
        return _dqn.FloatMatrix_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_FloatMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.FloatMatrix_push_back(self, x)

    def front(self):
        return _dqn.FloatMatrix_front(self)

    def back(self):
        return _dqn.FloatMatrix_back(self)

    def assign(self, n, x):
        return _dqn.FloatMatrix_assign(self, n, x)

    def resize(self, *args):
        return _dqn.FloatMatrix_resize(self, *args)

    def insert(self, *args):
        return _dqn.FloatMatrix_insert(self, *args)

    def reserve(self, n):
        return _dqn.FloatMatrix_reserve(self, n)

    def capacity(self):
        return _dqn.FloatMatrix_capacity(self)
    __swig_destroy__ = _dqn.delete_FloatMatrix
    __del__ = lambda self: None
FloatMatrix_swigregister = _dqn.FloatMatrix_swigregister
FloatMatrix_swigregister(FloatMatrix)

class DoubleMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleMatrix, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _dqn.DoubleMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dqn.DoubleMatrix___nonzero__(self)

    def __bool__(self):
        return _dqn.DoubleMatrix___bool__(self)

    def __len__(self):
        return _dqn.DoubleMatrix___len__(self)

    def __getslice__(self, i, j):
        return _dqn.DoubleMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dqn.DoubleMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dqn.DoubleMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dqn.DoubleMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dqn.DoubleMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dqn.DoubleMatrix___setitem__(self, *args)

    def pop(self):
        return _dqn.DoubleMatrix_pop(self)

    def append(self, x):
        return _dqn.DoubleMatrix_append(self, x)

    def empty(self):
        return _dqn.DoubleMatrix_empty(self)

    def size(self):
        return _dqn.DoubleMatrix_size(self)

    def swap(self, v):
        return _dqn.DoubleMatrix_swap(self, v)

    def begin(self):
        return _dqn.DoubleMatrix_begin(self)

    def end(self):
        return _dqn.DoubleMatrix_end(self)

    def rbegin(self):
        return _dqn.DoubleMatrix_rbegin(self)

    def rend(self):
        return _dqn.DoubleMatrix_rend(self)

    def clear(self):
        return _dqn.DoubleMatrix_clear(self)

    def get_allocator(self):
        return _dqn.DoubleMatrix_get_allocator(self)

    def pop_back(self):
        return _dqn.DoubleMatrix_pop_back(self)

    def erase(self, *args):
        return _dqn.DoubleMatrix_erase(self, *args)

    def __init__(self, *args):
        this = _dqn.new_DoubleMatrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _dqn.DoubleMatrix_push_back(self, x)

    def front(self):
        return _dqn.DoubleMatrix_front(self)

    def back(self):
        return _dqn.DoubleMatrix_back(self)

    def assign(self, n, x):
        return _dqn.DoubleMatrix_assign(self, n, x)

    def resize(self, *args):
        return _dqn.DoubleMatrix_resize(self, *args)

    def insert(self, *args):
        return _dqn.DoubleMatrix_insert(self, *args)

    def reserve(self, n):
        return _dqn.DoubleMatrix_reserve(self, n)

    def capacity(self):
        return _dqn.DoubleMatrix_capacity(self)
    __swig_destroy__ = _dqn.delete_DoubleMatrix
    __del__ = lambda self: None
DoubleMatrix_swigregister = _dqn.DoubleMatrix_swigregister
DoubleMatrix_swigregister(DoubleMatrix)

class sGeometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sGeometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sGeometry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _dqn.sGeometry_w_set
    __swig_getmethods__["w"] = _dqn.sGeometry_w_get
    if _newclass:
        w = _swig_property(_dqn.sGeometry_w_get, _dqn.sGeometry_w_set)
    __swig_setmethods__["h"] = _dqn.sGeometry_h_set
    __swig_getmethods__["h"] = _dqn.sGeometry_h_get
    if _newclass:
        h = _swig_property(_dqn.sGeometry_h_get, _dqn.sGeometry_h_set)
    __swig_setmethods__["d"] = _dqn.sGeometry_d_set
    __swig_getmethods__["d"] = _dqn.sGeometry_d_get
    if _newclass:
        d = _swig_property(_dqn.sGeometry_d_get, _dqn.sGeometry_d_set)

    def __init__(self):
        this = _dqn.new_sGeometry()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_sGeometry
    __del__ = lambda self: None
sGeometry_swigregister = _dqn.sGeometry_swigregister
sGeometry_swigregister(sGeometry)

class sHyperparameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sHyperparameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sHyperparameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["init_weight_range"] = _dqn.sHyperparameters_init_weight_range_set
    __swig_getmethods__["init_weight_range"] = _dqn.sHyperparameters_init_weight_range_get
    if _newclass:
        init_weight_range = _swig_property(_dqn.sHyperparameters_init_weight_range_get, _dqn.sHyperparameters_init_weight_range_set)
    __swig_setmethods__["learning_rate"] = _dqn.sHyperparameters_learning_rate_set
    __swig_getmethods__["learning_rate"] = _dqn.sHyperparameters_learning_rate_get
    if _newclass:
        learning_rate = _swig_property(_dqn.sHyperparameters_learning_rate_get, _dqn.sHyperparameters_learning_rate_set)
    __swig_setmethods__["lambda1"] = _dqn.sHyperparameters_lambda1_set
    __swig_getmethods__["lambda1"] = _dqn.sHyperparameters_lambda1_get
    if _newclass:
        lambda1 = _swig_property(_dqn.sHyperparameters_lambda1_get, _dqn.sHyperparameters_lambda1_set)
    __swig_setmethods__["lambda2"] = _dqn.sHyperparameters_lambda2_set
    __swig_getmethods__["lambda2"] = _dqn.sHyperparameters_lambda2_get
    if _newclass:
        lambda2 = _swig_property(_dqn.sHyperparameters_lambda2_get, _dqn.sHyperparameters_lambda2_set)
    __swig_setmethods__["dropout"] = _dqn.sHyperparameters_dropout_set
    __swig_getmethods__["dropout"] = _dqn.sHyperparameters_dropout_get
    if _newclass:
        dropout = _swig_property(_dqn.sHyperparameters_dropout_get, _dqn.sHyperparameters_dropout_set)
    __swig_setmethods__["beta1"] = _dqn.sHyperparameters_beta1_set
    __swig_getmethods__["beta1"] = _dqn.sHyperparameters_beta1_get
    if _newclass:
        beta1 = _swig_property(_dqn.sHyperparameters_beta1_get, _dqn.sHyperparameters_beta1_set)
    __swig_setmethods__["beta2"] = _dqn.sHyperparameters_beta2_set
    __swig_getmethods__["beta2"] = _dqn.sHyperparameters_beta2_get
    if _newclass:
        beta2 = _swig_property(_dqn.sHyperparameters_beta2_get, _dqn.sHyperparameters_beta2_set)
    __swig_setmethods__["epsilon"] = _dqn.sHyperparameters_epsilon_set
    __swig_getmethods__["epsilon"] = _dqn.sHyperparameters_epsilon_get
    if _newclass:
        epsilon = _swig_property(_dqn.sHyperparameters_epsilon_get, _dqn.sHyperparameters_epsilon_set)
    __swig_setmethods__["minibatch_size"] = _dqn.sHyperparameters_minibatch_size_set
    __swig_getmethods__["minibatch_size"] = _dqn.sHyperparameters_minibatch_size_get
    if _newclass:
        minibatch_size = _swig_property(_dqn.sHyperparameters_minibatch_size_get, _dqn.sHyperparameters_minibatch_size_set)

    def __init__(self):
        this = _dqn.new_sHyperparameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_sHyperparameters
    __del__ = lambda self: None
sHyperparameters_swigregister = _dqn.sHyperparameters_swigregister
sHyperparameters_swigregister(sHyperparameters)

class sDQNExperienceBuffer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sDQNExperienceBuffer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sDQNExperienceBuffer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["state"] = _dqn.sDQNExperienceBuffer_state_set
    __swig_getmethods__["state"] = _dqn.sDQNExperienceBuffer_state_get
    if _newclass:
        state = _swig_property(_dqn.sDQNExperienceBuffer_state_get, _dqn.sDQNExperienceBuffer_state_set)
    __swig_setmethods__["q_values"] = _dqn.sDQNExperienceBuffer_q_values_set
    __swig_getmethods__["q_values"] = _dqn.sDQNExperienceBuffer_q_values_get
    if _newclass:
        q_values = _swig_property(_dqn.sDQNExperienceBuffer_q_values_get, _dqn.sDQNExperienceBuffer_q_values_set)
    __swig_setmethods__["action"] = _dqn.sDQNExperienceBuffer_action_set
    __swig_getmethods__["action"] = _dqn.sDQNExperienceBuffer_action_get
    if _newclass:
        action = _swig_property(_dqn.sDQNExperienceBuffer_action_get, _dqn.sDQNExperienceBuffer_action_set)
    __swig_setmethods__["reward"] = _dqn.sDQNExperienceBuffer_reward_set
    __swig_getmethods__["reward"] = _dqn.sDQNExperienceBuffer_reward_get
    if _newclass:
        reward = _swig_property(_dqn.sDQNExperienceBuffer_reward_get, _dqn.sDQNExperienceBuffer_reward_set)
    __swig_setmethods__["is_final"] = _dqn.sDQNExperienceBuffer_is_final_set
    __swig_getmethods__["is_final"] = _dqn.sDQNExperienceBuffer_is_final_get
    if _newclass:
        is_final = _swig_property(_dqn.sDQNExperienceBuffer_is_final_get, _dqn.sDQNExperienceBuffer_is_final_set)

    def __init__(self):
        this = _dqn.new_sDQNExperienceBuffer()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_sDQNExperienceBuffer
    __del__ = lambda self: None
sDQNExperienceBuffer_swigregister = _dqn.sDQNExperienceBuffer_swigregister
sDQNExperienceBuffer_swigregister(sDQNExperienceBuffer)

class DQNInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQNInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQNInterface, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_DQNInterface(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_DQNInterface
    __del__ = lambda self: None

    def init_interface(self, state_geometry, actions_count, experience_buffer_size):
        return _dqn.DQNInterface_init_interface(self, state_geometry, actions_count, experience_buffer_size)

    def buffer_clear(self):
        return _dqn.DQNInterface_buffer_clear(self)

    def get_q_values(self):
        return _dqn.DQNInterface_get_q_values(self)

    def get_max_q_value(self):
        return _dqn.DQNInterface_get_max_q_value(self)

    def add(self, state, q_values, action, reward):
        return _dqn.DQNInterface_add(self, state, q_values, action, reward)

    def add_final(self, state, q_values, action, final_reward):
        return _dqn.DQNInterface_add_final(self, state, q_values, action, final_reward)

    def compute_q_values(self, state):
        return _dqn.DQNInterface_compute_q_values(self, state)

    def learn(self):
        return _dqn.DQNInterface_learn(self)

    def new_batch(self):
        return _dqn.DQNInterface_new_batch(self)

    def is_full(self):
        return _dqn.DQNInterface_is_full(self)

    def test(self):
        return _dqn.DQNInterface_test(self)

    def get_compare_result(self):
        return _dqn.DQNInterface_get_compare_result(self)

    def save(self, file_name_prefix):
        return _dqn.DQNInterface_save(self, file_name_prefix)

    def load_weights(self, file_name_prefix):
        return _dqn.DQNInterface_load_weights(self, file_name_prefix)

    def _print(self):
        return _dqn.DQNInterface__print(self)
DQNInterface_swigregister = _dqn.DQNInterface_swigregister
DQNInterface_swigregister(DQNInterface)

class DQN(DQNInterface):
    __swig_setmethods__ = {}
    for _s in [DQNInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQN, name, value)
    __swig_getmethods__ = {}
    for _s in [DQNInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DQN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_DQN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_DQN
    __del__ = lambda self: None

    def init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size):
        return _dqn.DQN_init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size)

    def compute_q_values(self, state):
        return _dqn.DQN_compute_q_values(self, state)

    def learn(self):
        return _dqn.DQN_learn(self)

    def test(self):
        return _dqn.DQN_test(self)

    def new_batch(self):
        return _dqn.DQN_new_batch(self)

    def is_full(self):
        return _dqn.DQN_is_full(self)
DQN_swigregister = _dqn.DQN_swigregister
DQN_swigregister(DQN)

class DDQN(DQNInterface):
    __swig_setmethods__ = {}
    for _s in [DQNInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DDQN, name, value)
    __swig_getmethods__ = {}
    for _s in [DQNInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DDQN, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_DDQN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_DDQN
    __del__ = lambda self: None

    def init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size):
        return _dqn.DDQN_init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size)

    def compute_q_values(self, state):
        return _dqn.DDQN_compute_q_values(self, state)

    def learn(self):
        return _dqn.DDQN_learn(self)

    def test(self):
        return _dqn.DDQN_test(self)

    def new_batch(self):
        return _dqn.DDQN_new_batch(self)

    def is_full(self):
        return _dqn.DDQN_is_full(self)
DDQN_swigregister = _dqn.DDQN_swigregister
DDQN_swigregister(DDQN)

class DQNCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQNCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DQNCompare, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_DQNCompare(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_DQNCompare
    __del__ = lambda self: None

    def clear(self):
        return _dqn.DQNCompare_clear(self)

    def set_output_size(self, output_size):
        return _dqn.DQNCompare_set_output_size(self, output_size)

    def compare(self, target_value, output_value, action):
        return _dqn.DQNCompare_compare(self, target_value, output_value, action)

    def process(self, fixed_bars_count=-1):
        return _dqn.DQNCompare_process(self, fixed_bars_count)

    def get_error_average_squared(self):
        return _dqn.DQNCompare_get_error_average_squared(self)

    def get_error_min_squared(self):
        return _dqn.DQNCompare_get_error_min_squared(self)

    def get_error_max_squared(self):
        return _dqn.DQNCompare_get_error_max_squared(self)

    def save_text_file(self, log_file_name_prefix):
        return _dqn.DQNCompare_save_text_file(self, log_file_name_prefix)

    def save_json_file(self, json_file_name):
        return _dqn.DQNCompare_save_json_file(self, json_file_name)

    def process_json_result(self):
        return _dqn.DQNCompare_process_json_result(self)
DQNCompare_swigregister = _dqn.DQNCompare_swigregister
DQNCompare_swigregister(DQNCompare)

class DQNP(DQNInterface):
    __swig_setmethods__ = {}
    for _s in [DQNInterface]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DQNP, name, value)
    __swig_getmethods__ = {}
    for _s in [DQNInterface]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DQNP, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_DQNP(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_DQNP
    __del__ = lambda self: None

    def init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size):
        return _dqn.DQNP_init(self, json_config, gamma, state_geometry, actions_count, experience_buffer_size)

    def compute_q_values(self, state):
        return _dqn.DQNP_compute_q_values(self, state)

    def learn(self):
        return _dqn.DQNP_learn(self)

    def test(self):
        return _dqn.DQNP_test(self)

    def new_batch(self):
        return _dqn.DQNP_new_batch(self)

    def is_full(self):
        return _dqn.DQNP_is_full(self)
DQNP_swigregister = _dqn.DQNP_swigregister
DQNP_swigregister(DQNP)

class RandomDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomDistribution, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _dqn.new_RandomDistribution(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _dqn.delete_RandomDistribution
    __del__ = lambda self: None

    def set(self, p_, count=-1):
        return _dqn.RandomDistribution_set(self, p_, count)

    def get(self):
        return _dqn.RandomDistribution_get(self)
RandomDistribution_swigregister = _dqn.RandomDistribution_swigregister
RandomDistribution_swigregister(RandomDistribution)


def DQNTest():
    return _dqn.DQNTest()
DQNTest = _dqn.DQNTest
# This file is compatible with both classic and new-style classes.


